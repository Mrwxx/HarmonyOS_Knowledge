

## 摘要









## 一、尺寸属性

### （一）、width & height & size

#### 1、概述

weight/height属性指定了当前组件的宽高属性：

size 属性可以同时指定 weight/height。



#### 2、单位

尺寸的单位是Length，Length又可以通过如下的三种方式指定尺寸单位：

##### （1）、string

显式指定像素单位，如'10px'，也可设置百分比字符串，如'100%'，也可以指定vp大小，如'100vp'。



##### （2）、number

直接指定数值，单位默认为vp。



##### （3）、Resource

可以引用系统的资源或者是应用的资源，资源中可以指定尺寸数据，如`$r('belonging.type.name')`以及`$rawfile('filename')`，具体请参考：

[类型定义-组件参考（基于ArkTS的声明式开发范式）-ArkTS API参考-HarmonyOS应用开发](https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/ts-types-0000001477981241-V3#ZH-CN_TOPIC_0000001573928889__resource)



#### 3、练习

##### （1）、不指定weight/height

```typescript
Stack(){
      Row() {
      }
      // 指定数字，为vp单位
      .width(500)
      // 指定数值字符串，可以指定vp、px
      .height('500vp')
      // 指定资源引用 $r
      .backgroundColor(Color.Pink)

      Row(){

      }
      .backgroundColor(Color.Green)
}
```



- 如果不指定width/height属性，则当前组件默认由子组件的尺寸决定，如果没有子组件的内容，则当前组件的尺寸为0

可以看到，我们指定了两个Row组件，一个是粉色背景的，指定了宽高，另一个是绿色背景的没有指定宽高，因此没有指定height/weight的Row组件是无法显示的。得出的效果如下所示：

<img src="D:\HarmonyOS\workspace\Doc\HarmonyOS_Knowledge\组件的尺寸属性.assets\image-20231126123610123.png" alt="image-20231126123610123" style="zoom:50%;" />





##### （2）、同时指定当前组件的weight/height

```typescript
Stack(){
      Row() {
      }
      // 指定数字，为vp单位
      .width(500)
      // 指定数值字符串，可以指定vp、px
      .height('500vp')
      // 指定资源引用 $r
      .backgroundColor(Color.Pink)

      Row(){

      }
      .backgroundColor(Color.Green)
      .width(300)
      .height('500vp')
}
```



指定了组件的单个weight/height属性，依然是无法显示的，需要同时指定当前第二个Row的weight/height，如下所示：

<img src="D:\HarmonyOS\workspace\Doc\HarmonyOS_Knowledge\组件的尺寸属性.assets\image-20231126123847522.png" alt="image-20231126123847522" style="zoom:50%;" />



##### （3）、子组件weight/height小于父组件

```typescript
Stack(){
      Row() {
      }
      // 指定数字，为vp单位
      .width(500)
      // 指定数值字符串，可以指定vp、px
      .height('500vp')
      // 指定资源引用 $r
      .backgroundColor(Color.Pink)

      Row(){
        Row(){
        }
        .width(100)
        .height('500vp')
        .backgroundColor(Color.Black)
      }
      .backgroundColor(Color.Green)
      .width(300)
      .height('500vp')
}
```

如果我们指定了子组件的weight/height，且小于父组件，那么

- 父组件的大小是不变的
- 子组件就会显示在父组件的范围内



如下所示：

<img src="D:\HarmonyOS\workspace\Doc\HarmonyOS_Knowledge\组件的尺寸属性.assets\image-20231126131223154.png" alt="image-20231126131223154" style="zoom:50%;" />





##### （4）、子组件weight/height大于父组件

```typescript
Stack(){
      Row() {
      }
      // 指定数字，为vp单位
      .width(500)
      // 指定数值字符串，可以指定vp、px
      .height('500vp')
      // 指定资源引用 $r
      .backgroundColor(Color.Pink)

      Row(){
        Row(){
        }
        .width(300)
        .height('500vp')
        .backgroundColor(Color.Black)
      }
      .backgroundColor(Color.Green)
      .width(150)
      .height('500vp')
}
```



- 子组件weight/height大于父组件，则子组件的尺寸会超过父组件的尺寸；

如下所示，黑色子组件超过绿色父组件尺寸，直接掩盖了：

<img src="D:\HarmonyOS\workspace\Doc\HarmonyOS_Knowledge\组件的尺寸属性.assets\image-20231126131729997.png" alt="image-20231126131729997" style="zoom:50%;" />



##### （5）、子组件weight/height等于父组件

```typescript
Stack(){
      Row() {
      }
      // 指定数字，为vp单位
      .width(500)
      // 指定数值字符串，可以指定vp、px
      .height('500vp')
      // 指定资源引用 $r
      .backgroundColor(Color.Pink)

      Row(){
        Row(){
        }
        .width(150)
        .height('400vp')
        .backgroundColor(Color.Black)
      }
      .backgroundColor(Color.Green)
      .width(150)
      .height('500vp')
}
```

- 同等尺寸下，子组件会覆盖父组件；

如下所示，相同width的黑色子组件就覆盖了部分绿色父组件：

<img src="D:\HarmonyOS\workspace\Doc\HarmonyOS_Knowledge\组件的尺寸属性.assets\image-20231126131942460.png" alt="image-20231126131942460" style="zoom:50%;" />





### （二）、padding & margin & border

#### 1、概述

padding 是内边距属性，margin是外边距属性，border是边缘属性。用一个图来解释这三者之间的关系，如下所示：

![image-20231126134308792](D:\HarmonyOS\workspace\Doc\HarmonyOS_Knowledge\组件的尺寸属性.assets\image-20231126134308792.png)



如果当前组件设置了padding属性，那么当前组件的子组件就会与当前组件的border边缘有一段距离，这就是padding属性，相当于针对子组件来设定的；

如果当前组件设置了margin属性，相当于当前组件与外部组件之间的间距，在设定不同组件之间的间隔时使用的比较多；

如果当前组件设置了border属性，相当于在当前组件内部边缘描了一圈，通常表示突出显示效果；

当前组件的weight/height设置，体现在border与margin之间，下面我们通过代码来验证；





#### 2、单位







#### 3、练习

##### （1）、border与width/weight之间的关系

border边缘属性到底是在组件设置width/weight属性的里面还是外面呢？我们通过代码验证一下。

```typescript
Column(){
      Row() {
      }
      // 指定数字，为vp单位
      .width(500)
      // 指定数值字符串，可以指定vp、px
      .height('200vp')
      // 指定资源引用 $r
      .backgroundColor(Color.Pink)

      Row(){
      }
      .border({
        color:Color.Black,
        width: 10
      })
      .backgroundColor(Color.Green)
      .width(500)
      .height('200vp')
    }
```



通过两个相同width的Row组件，我们可以看到设置了border边缘属性的绿色组件宽度与粉色Row宽度一致，因此可以得出结论：

- border在width/weight之内；

如下所示：

<img src="D:\HarmonyOS\workspace\Doc\HarmonyOS_Knowledge\组件的尺寸属性.assets\image-20231126140606302.png" alt="image-20231126140606302" style="zoom:50%;" />





##### （2）、父组件的padding从什么属性开始计算呢

为当前组件设定了padding和border后，我们知道当前组件的padding是当前组件的border和子组件之间的间距，那么如果子组件设置了margin/border/weight/padding，那么父组件的padding到底是和子组件的哪个属性之间的边距呢？

创建两个平行位置的组件，可以从代码看出，下面两个黑色的Row组件width属性相同，且偏移量相同，如下所示：

<img src="D:\HarmonyOS\workspace\Doc\HarmonyOS_Knowledge\组件的尺寸属性.assets\image-20231126152118979.png" alt="image-20231126152118979" style="zoom:80%;" />

```typescript
Column(){
      Row(){
        Row(){
        }
        .width(20)
        .height('200vp')
        .backgroundColor(Color.Black)
      }
      .padding({
        left: 100
      })
      // .border({
      //   color:Color.Yellow,
      //   width: 20
      // })
      .backgroundColor(Color.Green)
      .width(500)
      .height('200vp')

      Row(){
      }
      .width(20)
      .height('200vp')
      .backgroundColor(Color.Black)
      .offset({
        x: -140
      })
    }
```





当设置了前一个黑色Row组件的父组件border属性后，border属性的宽度为20vp，前一个黑色Row组件便向右偏移了一个20vp的宽度，可以得出结论：

- 父组件设置了padding & border，padding的计算是从border内部开始的；

<img src="D:\HarmonyOS\workspace\Doc\HarmonyOS_Knowledge\组件的尺寸属性.assets\image-20231126151931965.png" alt="image-20231126151931965" style="zoom: 80%;" />

```typescript
Column(){
      Row(){
        Row(){
        }
        .width(20)
        .height('200vp')
        .backgroundColor(Color.Black)
      }
      .padding({
        left: 100
      })
      .border({
        color:Color.Yellow,
        width: 20
      })
      .backgroundColor(Color.Green)
      .width(500)
      .height('200vp')

      Row(){
      }
      .width(20)
      .height('200vp')
      .backgroundColor(Color.Black)
      .offset({
        x: -140
      })
    }
```





##### （3）、父组件的padding到子组件的什么属性结束计算呢



我们通过观察子组件在添加margin、border、padding属性的前后差异，来查看父组件的padding属性的计算结束位置到底是子组件的什么属性。



###### a、子组件无margin、border、padding属性

```typescript
Column(){
      Row() {
      }
      // 指定数字，为vp单位
      .width(500)
      // 指定数值字符串，可以指定vp、px
      .height('200vp')
      // 指定资源引用 $r
      .backgroundColor(Color.Pink)

      Row(){
        Row(){
        }
        .width(100)
        .height('200vp')
        .backgroundColor(Color.Black)
        // .margin(100)
        // .border({
        //   color: Color.Grey,
        //   width: 20
        // })
        // .padding(20)
      }
      .padding({
        left: 100
      })
      // .border({
      //   color:Color.Yellow,
      //   width: 20
      // })
      .backgroundColor(Color.Green)
      .width(500)
      .height('200vp')

      Row(){
      }
      .width(100)
      .height('200vp')
      .backgroundColor(Color.Black)
      .offset({
        x: -100
      })

      Row(){
      }
      .width(100)
      .height('200vp')
      .backgroundColor(Color.Orange)
      .offset({
        x: 0,
        y: -200
      })
    }
```

上方的黑色Row子组件没有其他属性，则父组件的padding只是根据子组件的正常width/weight进行计算，与下方的黑色Row组件偏移位置一致。



<img src="D:\HarmonyOS\workspace\Doc\HarmonyOS_Knowledge\组件的尺寸属性.assets\image-20231126153953789.png" alt="image-20231126153953789" style="zoom:80%;" />



###### b、子组件添加margin





###### c、子组件添加margin、border属性





###### d、子组件添加margin、border、padding属性







## 二、尺寸属性练习



